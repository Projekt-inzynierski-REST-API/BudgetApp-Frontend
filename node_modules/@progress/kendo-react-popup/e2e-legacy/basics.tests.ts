import { Browser, By } from '@progress/kendo-e2e';
import { DELAYS, LOCATORS } from '../../../e2eUtils/const';

jest.retryTimes(3);

let browser: Browser;

beforeAll(async () => {
  browser = new Browser();
  await browser.driver.manage().window().setRect({ width: 1920, height: 1080 });
});

beforeEach(async () => {
  await browser.navigateTo('http://localhost:8888/examples/e2e/basic.html');
  await browser.find(LOCATORS.APP);
});

afterEach(async () => {
  expect(await browser.getErrorLogs()).toEqual([]);
});

afterAll(async () => {
  await browser.close();
});

const animationContainer = '.k-animation-container';
const animationChildSelector = animationContainer + ' > .k-child-animation-container';
const staticPopup = '.static.k-animation-container';
const togglePopupBtn = 'button.toggle';

it('open and close events is fired on time', async () => {
    await browser.click(By.css('.animationToggle'));
    await browser.sleep(DELAYS.DEFAULT);

    await browser.click(By.css(togglePopupBtn));

    const time1 = Date.now();
    const popupClose = await browser.find(By.id('popupConsole'));
    expect(await browser.waitSafely(async () => (await popupClose.getAttribute('value')).includes('open'))).toBe(true);
    const time2 = Date.now();
    expect(time2 - time1).toBeGreaterThan(300);
    expect(time2 - time1).toBeLessThan(450);

    await browser.click(By.css(togglePopupBtn));
    const time3 = Date.now();
    expect(await browser.waitSafely(async () => (await popupClose.getAttribute('value')).includes('close'))).toBe(true);
    const time4 = Date.now();
    expect(time4 - time3).toBeGreaterThan(300);
    expect(time4 - time3).toBeLessThan(450);
});

const data = [
    ['left top', 'left top', 0, 0],
    ['left top', 'left bottom', 0, -52],
    ['left top', 'center center', -51, -26],
    ['left top', 'right top', -102, 0],
    ['left top', 'right bottom', -102, -52],
    ['left center', 'left top', 0, 10],
    ['left center', 'right bottom', -102, -42],
    ['left bottom', 'left top', 0, 20],
    ['left bottom', 'right bottom', -102, -32],
    ['center bottom', 'right bottom', -52, -32],
    ['center top', 'left top', 50, 0],
    ['center top', 'right bottom', -52, -52],
    ['right top', 'left top', 100, 0],
    ['right top', 'right bottom', -2, -52],
    ['right center', 'left top', 100, 10],
    ['right center', 'right bottom', -2, -42],
    ['right bottom', 'left top', 100, 20],
    ['right bottom', 'center center', 49, -6],
    ['right bottom', 'right bottom', -2, -32]
];
it.each(data)('open at (anchorAlign: %s, popupAlign: %s)', async (anchorAlign, popupAlign, xDiff, yDiff) => {
    await setAlign(anchorAlign as string, popupAlign as string);
    await browser.click(By.css(togglePopupBtn));
    const aRect = await (await browser.find(By.css('.anchor'))).getRect();
    const pRect = await (await browser.find(LOCATORS.POPUP)).getRect();
    expect(pRect.x - aRect.x).toEqual(xDiff);
    expect(pRect.y - aRect.y).toEqual(yDiff);
});

it('open at top - 100px, left: 100px', async () => {
    await browser.click(By.css('button.staticToggle'));
    const popup = await browser.find(By.css(staticPopup));
    expect(await popup.getCssValue('left')).toEqual('100px');
    expect(await popup.getCssValue('top')).toEqual('100px');
});

it('reposition static popup', async () => {
    await browser.click(By.css('button.staticToggle'));
    const popup = await browser.find(By.css(staticPopup));

    await browser.type(await browser.find(By.id('leftStatic')), '110');
    await browser.type(await browser.find(By.id('topStatic')), '120');
    await browser.sleep(DELAYS.DEFAULT);

    expect(await popup.getCssValue('left')).toEqual('110px');
    expect(await popup.getCssValue('top')).toEqual('120px');
});

it('animation transition time', async () => {
    await browser.click(By.css('.animationToggle'));
    await browser.sleep(DELAYS.SMALL);

    await browser.click(By.css(togglePopupBtn));
    await browser.sleep(DELAYS.ANIMATION);
    expect((await browser.findAll(By.css(animationChildSelector))).length).toBeGreaterThan(0);

    await browser.click(By.css(togglePopupBtn));
    await browser.sleep(DELAYS.SMALL);
    expect((await browser.findAll(By.css(animationChildSelector))).length).toBeGreaterThan(0);
    await browser.sleep(DELAYS.ANIMATION);
    expect((await browser.findAll(By.css(animationChildSelector))).length).toEqual(0);
});

const testData = [
  {anchorAlign: 'left bottom', popupAlign: 'right top', position: {left: 30, top: 100}, collision: 'fit', xDiff: -30, yDiff: 20},
  {anchorAlign: 'left bottom', popupAlign: 'right top', position: {left: 30, top: 100}, collision: 'flip', xDiff: 100, yDiff: 20},
  {anchorAlign: 'left top', popupAlign: 'left bottom', position: {left: 500, top: 20}, collision: 'fit', xDiff: 0, yDiff: -20},
  {anchorAlign: 'left top', popupAlign: 'left bottom', position: {left: 500, top: 20}, collision: 'flip', xDiff: 0, yDiff: 20},
  {anchorAlign: 'right top', popupAlign: 'left top', position: {top: 100, right: 20}, collision: 'fit', xDiff: 100, yDiff: 0},
  {anchorAlign: 'right top', popupAlign: 'left top', position: {top: 100, right: 20}, collision: 'flip', xDiff: 100, yDiff: 0},
  {anchorAlign: 'left bottom', popupAlign: 'left top', position: {bottom: 20, right: 300}, collision: 'fit', xDiff: 0, yDiff: 20},
  {anchorAlign: 'left bottom', popupAlign: 'left top', position: {bottom: 20, right: 300}, collision: 'flip', xDiff: 0, yDiff: 20}
];
it.each(testData)('popup collisions left - flip', async (testData) => {
  await setAlign(testData.anchorAlign, testData.popupAlign);
  await setAnchorPosition(testData.position);
  await setCollisions(testData.collision);
  await browser.click(By.css(togglePopupBtn));
  const aRect = await (await browser.find(By.css('.anchor'))).getRect();
  const pRect = await (await browser.find(LOCATORS.POPUP)).getRect();
  expect(pRect.x - aRect.x).toEqual(testData.xDiff);
  expect(pRect.y - aRect.y).toEqual(testData.yDiff);
});

async function setAlign(anchorAlign: string, popupAlign: string) {
  await setValue('#anchorAlignSettings .horizontal', anchorAlign.split(' ')[0]);
  await setValue('#anchorAlignSettings .vertical', anchorAlign.split(' ')[1]);
  await setValue('#popupAlignSettings .horizontal', popupAlign.split(' ')[0]);
  await setValue('#popupAlignSettings .vertical', popupAlign.split(' ')[1]);
}

async function setAnchorPosition(position: any) {
  await setValue('#anchorLeft', position.left, true);
  await setValue('#anchorTop', position.top, true);
  await setValue('#anchorRight', position.right, true);
  await setValue('#anchorBottom', position.bottom, true);
}

async function setCollisions(collision: string) {
  await setValue('#collisionsSettings .horizontal', collision);
  await setValue('#collisionsSettings .vertical', collision);
}

async function setValue(selector: string, value: string, clear = false) {
  if (value !== undefined) {
    const input = await browser.find(By.css(selector));
    if (clear) {
      await input.clear();
    }
    await input.sendKeys(value);
  }
}
