var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Breadcrumb } from '@progress/kendo-react-layout';
import { SvgIcon } from '@progress/kendo-react-common';
import { homeIcon } from '@progress/kendo-svg-icons';
import { DrilldownStateChangeEvent } from './events/drilldown-state-change-event';
/**
 * Represents the Chart Breadcrumb component.
 */
export var ChartBreadcrumb = React.forwardRef(function (props, ref) {
    var target = React.useRef(null);
    var breadcrumbRef = React.useRef(null);
    React.useImperativeHandle(target, function () { return ({
        element: breadcrumbRef.current,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var rootItem = __assign({ id: '0' }, (props.rootItem || {
        text: 'Home',
        icon: React.createElement(SvgIcon, { icon: homeIcon, style: { marginInlineEnd: '4px' } })
    }));
    var data = [rootItem];
    if (props.drilldownState) {
        data = __spreadArray(__spreadArray([], data, true), props.drilldownState.steps.map(function (step, index) { return ({ id: (index + 1).toString(), text: step.drilldownValue }); }), true);
    }
    var breadcrumbProps = __assign(__assign({}, props), { data: data });
    var handleItemSelect = function (e) {
        var _a;
        var handler = 'onDrilldownStateChange';
        if (props.hasOwnProperty(handler)) {
            var level = data.findIndex(function (item) { return item.id === e.id; });
            var nextState = { steps: (((_a = props.drilldownState) === null || _a === void 0 ? void 0 : _a.steps) || []).slice(0, level) };
            var eventObject = new DrilldownStateChangeEvent({ currentState: props.drilldownState, nextState: nextState });
            props[handler].call(undefined, eventObject);
        }
    };
    return (React.createElement("div", null,
        React.createElement(Breadcrumb, __assign({}, breadcrumbProps, { onItemSelect: handleItemSelect }))));
});
var propTypes = {
    id: PropTypes.string,
    style: PropTypes.object,
    className: PropTypes.string,
    breadcrumbOrderedList: PropTypes.elementType,
    breadcrumbListItem: PropTypes.elementType,
    breadcrumbDelimiter: PropTypes.elementType,
    breadcrumbLink: PropTypes.elementType,
    dir: PropTypes.oneOf(['ltr', 'rtl']),
    disabled: PropTypes.bool,
    valueField: PropTypes.string,
    textField: PropTypes.string,
    iconField: PropTypes.string,
    iconClassField: PropTypes.string,
    onItemSelect: PropTypes.func,
    ariaLabel: PropTypes.string,
    onDrilldownStateChange: PropTypes.func,
    drilldownState: PropTypes.shape({
        steps: PropTypes.array
    }),
    rootItem: PropTypes.object
};
var defaultProps = {
    valueField: 'id',
    textField: 'text',
    iconField: 'icon',
    iconClassField: 'iconClass',
    data: []
};
ChartBreadcrumb.displayName = 'KendoReactChartBreadcrumb';
// TODO: delete casting when @types/react is updated!
ChartBreadcrumb.propTypes = propTypes;
ChartBreadcrumb.defaultProps = defaultProps;
