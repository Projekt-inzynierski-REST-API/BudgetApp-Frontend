var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { ConfigurationComponent } from './base/ConfigurationComponent';
import { ChartContext } from '../ChartContext';
var ChartSeriesItem = function (props) {
    var DrilldownFactory = function (_) { return React.createElement(React.Fragment, null); };
    if (props.drilldownSeriesFactory) {
        DrilldownFactory = props.drilldownSeriesFactory;
    }
    var drilldownFrame = function (context) { var _a, _b; return context && ((_b = (_a = context.drilldownState) === null || _a === void 0 ? void 0 : _a.steps) === null || _b === void 0 ? void 0 : _b.find(function (_a) {
        var seriesName = _a.seriesName;
        return seriesName === props.name;
    })); };
    return (React.createElement(ChartContext.Consumer, null, function (context) { return drilldownFrame(context) ?
        React.createElement(DrilldownFactory, { _chartCollectionIdxKey: props._chartCollectionIdxKey, drilldownValue: drilldownFrame(context).drilldownValue }) :
        React.createElement(ConfigurationComponent, __assign({}, props)); }));
};
ChartSeriesItem.displayName = 'ChartSeriesItem';
export { ChartSeriesItem };
