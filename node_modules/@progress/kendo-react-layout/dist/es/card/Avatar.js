var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, kendoThemeMaps } from '@progress/kendo-react-common';
import { avatarType } from './interfaces/Enums';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
export var Avatar = function (props) {
    var _a;
    var combinedProps = __assign({ type: avatarType.TEXT, size: 'medium', rounded: 'full', fillMode: 'solid', themeColor: 'primary' }, props);
    validatePackage(packageMetadata);
    return (React.createElement("div", { style: combinedProps.style, className: classNames('k-avatar', (_a = {},
            _a['k-avatar-bordered'] = combinedProps.border,
            _a["k-rounded-".concat(kendoThemeMaps.roundedMap[combinedProps.rounded] || combinedProps.rounded)] = combinedProps.rounded,
            _a["k-avatar-".concat(kendoThemeMaps.sizeMap[combinedProps.size] || combinedProps.size)] = combinedProps.size,
            _a["k-avatar-".concat(combinedProps.fillMode)] = combinedProps.fillMode,
            _a["k-avatar-".concat(combinedProps.fillMode, "-").concat(combinedProps.themeColor)] = Boolean(combinedProps.fillMode && combinedProps.themeColor),
            _a), combinedProps.className) },
        React.createElement("span", { className: "k-avatar-".concat(combinedProps.type) }, combinedProps.children)));
};
Avatar.propTypes = {
    className: PropTypes.string,
    type: PropTypes.oneOf(['text', 'image', 'icon']),
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    fillMode: PropTypes.oneOf([null, 'solid', 'outline']),
    /* eslint-disable max-len */
    themeColor: PropTypes.oneOf([null, 'base', 'dark', 'error', 'info', 'inverse', 'inverse', 'light', 'primary', 'secondary', 'success', 'tertiary', 'warning'])
};
