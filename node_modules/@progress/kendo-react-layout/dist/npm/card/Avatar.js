"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatar = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var Enums_1 = require("./interfaces/Enums");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
var Avatar = function (props) {
    var _a;
    var combinedProps = __assign({ type: Enums_1.avatarType.TEXT, size: 'medium', rounded: 'full', fillMode: 'solid', themeColor: 'primary' }, props);
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    return (React.createElement("div", { style: combinedProps.style, className: (0, kendo_react_common_1.classNames)('k-avatar', (_a = {},
            _a['k-avatar-bordered'] = combinedProps.border,
            _a["k-rounded-".concat(kendo_react_common_1.kendoThemeMaps.roundedMap[combinedProps.rounded] || combinedProps.rounded)] = combinedProps.rounded,
            _a["k-avatar-".concat(kendo_react_common_1.kendoThemeMaps.sizeMap[combinedProps.size] || combinedProps.size)] = combinedProps.size,
            _a["k-avatar-".concat(combinedProps.fillMode)] = combinedProps.fillMode,
            _a["k-avatar-".concat(combinedProps.fillMode, "-").concat(combinedProps.themeColor)] = Boolean(combinedProps.fillMode && combinedProps.themeColor),
            _a), combinedProps.className) },
        React.createElement("span", { className: "k-avatar-".concat(combinedProps.type) }, combinedProps.children)));
};
exports.Avatar = Avatar;
exports.Avatar.propTypes = {
    className: PropTypes.string,
    type: PropTypes.oneOf(['text', 'image', 'icon']),
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    fillMode: PropTypes.oneOf([null, 'solid', 'outline']),
    /* eslint-disable max-len */
    themeColor: PropTypes.oneOf([null, 'base', 'dark', 'error', 'info', 'inverse', 'inverse', 'light', 'primary', 'secondary', 'success', 'tertiary', 'warning'])
};
